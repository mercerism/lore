::title
An Introduction to Lore

!!Lore!! is a new MarkDown-like markup syntax and toolchain.
The authors were dissatisfied with other solutions and decided to make another one.
These files are intended to teach you about Lore by example and to explain its design rationale.
If you are viewing these files as HTML or PDF documents, you may want to view the "Lore source" that was used to produce them.
The examples in the text are small and focus on demonstrating a single aspect of the !!Lore Syntax!!, but the source for this document will show you how a complete document was constructed using !!Lore!!.
You can find it at ::link:https://github.com/mercerism/lore/blob/master/docs/00_introduction.lore .

::section
The Very Basics

!!Lore!! is a markup syntax, a toolchain and a set of assumptions about documents.
The syntax is probably the easiest part of Lore to understand, so let's talk about that first.
The !!Lore Toolchain!! includes command-line utilities that convert files formatted using the !!Lore Syntax!! into HTML, PDF or DocBook/XML files.
As an example, you would use the **lore2html** utility to convert the following fragment into HTML:

;;--- 64 Columns is THIS much ------------------------------------
::caption:01_simple_example.lore
  This is a simple example of a //Lore file//.  It contains a few
  sentences in a few paragraphs.  We hope you find the markup is
  __intuitive__ and does not distract from typing content.
  
  Paragraphs are just collections of characters, separated by two
  "end of lines" -- that's a single Line-Feed on Unix-like systems
  or a Carriage-Return / Line-Feed sequence on DOS / Windows-like
  systems.
  
  Virtually all markup in !!Lore!! is accomplished with digraphs :
  two character sequences. This is so you can type regular
  sentences without worrying if you're going to accidentally
  trigger the formatter.

To convert this to HTML, you would use the following command (assuming the name of this file is **01_simple_example.lore**.)

  lore2html 01_simple_example.lore > 01_simple_example.html

And you should get the following HTML out:

;;--- 64 Columns is THIS much ------------------------------------
::caption:01_simple_example.html
  <!DOCTYPE html>
  <html>
    <body>
      <p>This is a simple example of a <i>Lore file</i>.  It
      contains a few sentences in a few paragraphs.  We hope you
      find the markup is <u>intuitive</u> and does not distract
      from typing content.</p>
      
      <p>Paragraphs are just collections of characters, separated
      by two "end of lines" &#8211; that's a single Line-Feed on
      Unix-like systems or a Carriage-Return / Line-Feed sequence
      on DOS / Windows-like systems.</p>
      
      <p>Virtually all markup in <b>Lore</b> is accomplished with
      digraphs : two character sequences. This is so you can type
      regular sentences without worrying if you're going to
      accidentally trigger the formatter.</p>
    </body>
  </html>

The actual output of the **lore2html** command may be slightly different.
In this example we indented the HTML elements and made the columns narrow to make it a little more readable.
But that's a simple example of using Lore from the command line.

::section
::level:1
Design Rationale

First, !!why do we need a new markup language?!!
Why not use @@ https://en.wikipedia.org/wiki/Markdown Markdown @@ or @@ https://en.wikipedia.org/wiki/Textile_(markup_language) Textile @@?
Or any of the many, many other @@ https://en.wikipedia.org/wiki/Lightweight_markup_language lightweight markup languages @@?

We were working on a project and tried both MarkDown and Textile, but both "got in our way" for a particular task we were trying to accomplish.
We were building tools to experiment with @@ http://www.literateprogramming.com/index.html Literate Programming @@ and discovered we too frequently triggered the MarkDown and Textile formatters.
After a brief attempt to add literate programming and templating support to MarkDown and Textile, we quickly determined it would be easier to start from scratch.
The !!Lore!! syntax was designed to explicitly support annotating blocks of text with arbitrary metadata and templating using @@ http://mustache.github.io/ Mustache @@ and @@ https://handlebarsjs.com/ Handlebars @@.
We then realized creating a new syntax and a new toolchain would give us the opportunity to develop new tools using the very literate programming techniques we wished to investigate.

Okay, !!Is Lore a Research Project?!!
Well, yes and no.
We want to add features to tools to support new experiments, but several of us use Lore on a daily basis for routine tasks.
It's very likely the toolchain will add experimental features that are triggered via metadata annotations.
But the fundamental syntax is stable and support for basic, non-experimental features will not change.
We are also fans of reverse compatibility; changes in the Lore syntax that break existing, non-experimental functionality won't be added to Lore.

Next, !!why use digraphs for markup?!!
Mostly because people usually do not use them when typing English sentences.
We did not want to have to worry about accidentally triggering the formatter.

!!Why did you pick the specfic digraphs you did?!!
The in-line formatting digraphs for bold, underline, italic and monospaced all have meaning.
The bold digraph is two exclamation points (\!!); we figured bolded text indicated something "exciting."
What punctuation mark is more exciting that the exclamation point?
The italic digraph is two slashes (\//); the slanted nature of the slashes are supposed to remind the user of the slanted, oblique nature of italic print.
The underscore digraph is two underbars (\__) which hopefully remind the user of the underline that will go under the text.
And the double asterisk digraph (\**) for inline monospaced type is to remind C-programmers of a pointer.
We use in-line monospace fonts for small code examples; it was obvious to us.

The Lore syntax was intended to be easy for humans to consume.
When there was a difference between "easy for writers" or "easy for programmers," we opted for "easy for writers."
But we believe the syntax is not //too// difficult for programmers to reason about.

::section
::level:1
Review

## !!Lore!! is a lightweight markup language for annotating simple text documents with arbitrary metadata and formatting markup.
## It was invented to support experiments in literate programming, but is useful in the same contexts that other lightweight markup languages are.
## The //Lore Toolchain// converts plain text files formatted using the //Lore Syntax// into HTML, @@ https://en.wikipedia.org/wiki/XSL_Formatting_Objects XSL Formatting Objects @@ or @@ https://en.wikipedia.org/wiki/DocBook DocBook/XML @@ files.
   Other tools like @@ https://www.princexml.com/ PrinceXML @@, @@ https://weasyprint.org/ WeasyPrint @@ or @@ https://xmlgraphics.apache.org/fop/ Apache FOP @@ can convert HTML or FO files into PDFs.
## A Lore file is an ordered collection of //blocks//.
   Blocks are separated by two End-of-Line sequences (LF or CRLF.)
## Text decoration markup (bold, underline, monospace and italic) is triggered by enclosing text in digraphs:
   (\!!) for bold, (\//) for italic / oblique, (\__) for underline and (\**) for monospace.

::section
Annotations, Metadata and Structural Directives

If you remember from the previous section, the !!Lore!! syntax was designed to make it simple to attach metadata to arbitrary blocks of text.
Metadata can apply to the whole document, a single block or a small span of text.
Common bits of document metadata include:
a document's author, it's title, a canonical URL where it can be found on the web or a unique document ID.

Here's an example of a Lore document with metadata attached:

;;--- 64 Columns is THIS much ------------------------------------
::caption:02_document_with_metadata.lore
  ::title
  An Example Document with Metadata

  ::copy
  Copyright (c) 2019 Meadhbh Hamrick, All Rights Reserved

  ::author
  Meadhbh Hamrick <meadhbh@example.com>

  ::abstract
  This document provides a simple example of a Lore document with
  metadata.

There's no standard interpretation of most metadata; it depends on what the application processing the Lore file thinks it should do.
By default, the **lore2html** utility will convert the document metadata blocks into paragraphs, styled with classes unique to the metadata tag.

The key take-aways here are:

## metadata is signified using the "annotation" double-colon digraph (\::)
## metadata "tags" preceed the blocks they annotate

From a syntax point of view, document metadata is just one use of the annotation digraph (\::).
We also use "annotations" to highlight document structure and add plain links to documents.
Annotations really are the "everything else" workhorse of Lore.

Titles and Section headers automagically generate anchors (targets for links) when used with **lore2html**.
The **\::link** annotation inserts an "undecorated" link to a local or remote link target.
//Undecorated// means the text of the link is the URL or local fragment name of the link.
"Decorated" links use a different format that's described later.

Here's another example:

;;--- 64 Columns is THIS much ------------------------------------
::caption:03_document_with_sections.lore
  ::title
  An Example Document with Multiple Sections

  This is a document that has multiple sections.

  ::section
  First Section

  This is the first paragraph in the first section.

  This is the second paragraph in the first section.

  This is a link to a later section:
  ::link:#Sub-Section Two .

  And this is a link to an external document:
  ::link:https://example.com/

  ::section
  Second Section

  This is the first paragraph in the second section.

  ::section
  ::level:1
  Sub-Section One
  
  This is the first paragraph in the first sub-section of
  the second section.

  ::section
  ::level:1
  Sub-Section Two
  
  This is the first paragraph in the second sub-section of
  the second section.

If we processed this file with **lore2html**, we would get something like this:

;;--- 64 Columns is THIS much ------------------------------------
::caption:03_document_with_sections.html
  <!DOCTYPE html>
  <html>
    <body>
      <a name="title"/>
      <h1>An Example Document with Multiple Sections</h1>

      <p>This is a document that has multiple sections.</p>

      <p>This is a link to a later section:
      <a href="#_1_1_sub_section_two">Sub-Section Two</a> .</p>

      <p>And this is a link to an external document:
      <a href="https://example.com/">https://example.com/</a> .
      </p>

      <a name="_0_first_section"/>
      <h2>First Section</h2>

      <p>This is the first paragraph in the first section.</p>

      <p>This is the second paragraph in the first section.</p>

      <a name="_1_second_section"/>
      <h2>Second Section</h2>

      <p>This is the first paragraph in the second section.</p>

      <a name="_1_0_sub_section_one">
      <h3>Sub-Section One</h3>

      <p>This is the first paragraph in the first sub-section of
      the second section.</p>

      <a name="_1_1_sub_section_two">
      <h3>Sub-Section Two</h3>

      <p>This is the first paragraph in the second sub-section of
      the second section.</p>
    </body>
  </html>

::section
::level:1
Design Rationale

Many of the documents we wrote contained only two levels;
a top level with a title and possibly an abstract followed by several sections.
We felt this is the use case that should be easy for content creators.
We also felt that metadata //should// look like an annotation on data that was already going to be in the document.
So rather than having a separate metadata tag for common metadata (think of HTML that has a TITLE element inside it's HEAD element) we thought we should just "promote" an existing section with a metadata annotation.

The original version of Lore used different digraphs to identify metadata (like title, abstract, etc.) from structural annotations (like **\::section** annotations.)
We found it was slightly confusing to the users who had to remember what was metadata and what was structural annotation.
And the tools we wrote handled metadata and structural annotation identically during the first phase of parsing.
So it may seem weird that we use the annotation digraph (\::) for both metadata and structuring the document, but users said it was easier to not have to remember different digraphs and it made no difference to the complexity of the code we wrote.

::section
::level:1
Review

## The //Annotation Digraph// (**\::**) denotes metadata (like title, abstract, author, etc.) as well
   as structural components in a document (like heading level 1, level 2, etc.)
## You can also insert //undecorated// links using the annotation digraph.
