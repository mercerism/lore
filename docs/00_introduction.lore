::title
An Introduction to Lore

!!Lore!! is a new MarkDown-like markup syntax and toolchain.
The authors were dissatisfied with other solutions and decided to make another one.
These files are intended to teach you about Lore by example and to explain its design rationale.
If you are viewing these files as HTML or PDF documents, you may want to view the "Lore source" that was used to produce them.
The examples in the text are small and focus on demonstrating a single aspect of the !!Lore Syntax!!, but the source for this document will show you how a complete document was constructed using !!Lore!!.
You can find it at ::link:https://github.com/mercerism/lore/blob/master/docs/00_introduction.lore:.

::section
The Very Basics

!!Lore!! is a markup syntax, a toolchain and a set of assumptions about documents.
The syntax is probably the easiest part of Lore to understand, so let's talk about that first.
The !!Lore Toolchain!! includes command-line utilities that convert files formatted using the !!Lore Syntax!! into HTML, PDF or DocBook/XML files.
As an example, you would use the **lore2html** utility to convert the following fragment into HTML:

;;--- 64 Columns is THIS much ------------------------------------
::caption:01_simple_example.lore:
  This is a simple example of a //Lore file//.  It contains a few
  sentences in a few paragraphs.  We hope you find the markup is
  __intuitive__ and does not distract from typing content.
  
  Paragraphs are just collections of characters, separated by two
  "end of lines" -- that's a single Line-Feed on Unix-like systems
  or a Carriage-Return / Line-Feed sequence on DOS / Windows-like
  systems.
  
  Virtually all markup in !!Lore!! is accomplished with digraphs :
  two character sequences. This is so you can type regular
  sentences without worrying if you're going to accidentally
  trigger the formatter.

To convert this to HTML, you would use the following command (assuming the name of this file is **01_simple_example.lore**.)

  lore2html 01_simple_example.lore > 01_simple_example.html

And you should get the following HTML out:

;;--- 64 Columns is THIS much ------------------------------------
::caption:01_simple_example.html:
  <!DOCTYPE html>
  <html>
    <body>
      <p>This is a simple example of a <i>Lore file</i>.  It
      contains a few sentences in a few paragraphs.  We hope you
      find the markup is <u>intuitive</u> and does not distract
      from typing content.</p>
      
      <p>Paragraphs are just collections of characters, separated
      by two "end of lines" &#8211; that's a single Line-Feed on
      Unix-like systems or a Carriage-Return / Line-Feed sequence
      on DOS / Windows-like systems.</p>
      
      <p>Virtually all markup in <b>Lore</b> is accomplished with
      digraphs : two character sequences. This is so you can type
      regular sentences without worrying if you're going to
      accidentally trigger the formatter.</p>
    </body>
  </html>

The actual output of the **lore2html** command may be slightly different.
In this example we indented the HTML elements and made the columns narrow to make it a little more readable.
But that's a simple example of using Lore from the command line.

::section
::level:1
Design Rationale

First, !!why do we need a new markup language?!!
Why not use @@ https://en.wikipedia.org/wiki/Markdown Markdown @@ or @@ https://en.wikipedia.org/wiki/Textile_(markup_language) Textile @@?
Or any of the many, many other @@ https://en.wikipedia.org/wiki/Lightweight_markup_language lightweight markup languages @@?

We were working on a project and tried both MarkDown and Textile, but both "got in our way" for a particular task we were trying to accomplish.
We were building tools to experiment with @@ http://www.literateprogramming.com/index.html Literate Programming @@ and discovered we too frequently triggered the MarkDown and Textile formatters.
After a brief attempt to add literate programming and templating support to MarkDown and Textile, we quickly determined it would be easier to start from scratch.
The !!Lore!! syntax was designed to explicitly support annotating blocks of text with arbitrary metadata and templating using @@ http://mustache.github.io/ Mustache @@ and @@ https://handlebarsjs.com/ Handlebars @@.
We then realized creating a new syntax and a new toolchain would give us the opportunity to develop new tools using the very literate programming techniques we wished to investigate.

Okay, !!Is Lore a Research Project?!!
Well, yes and no.
We want to add features to tools to support new experiments, but several of us use Lore on a daily basis for routine tasks.
It's very likely the toolchain will add experimental features that are triggered via metadata annotations.
But the fundamental syntax is stable and support for basic, non-experimental features will not change.
We are also fans of reverse compatibility; changes in the Lore syntax that break existing, non-experimental functionality won't be added to Lore.

Next, !!why use digraphs for markup?!!
Mostly because people usually do not use them when typing English sentences.
We did not want to have to worry about accidentally triggering the formatter.

!!Why did you pick the specfic digraphs you did?!!
The in-line formatting digraphs for bold, underline, italic and monospaced all have meaning.
The bold digraph is two exclamation points (\!!); we figured bolded text indicated something "exciting."
What punctuation mark is more exciting that the exclamation point?
The italic digraph is two slashes (\//); the slanted nature of the slashes are supposed to remind the user of the slanted, oblique nature of italic print.
The underscore digraph is two underbars (\__) which hopefully remind the user of the underline that will go under the text.
And the double asterisk digraph (\**) for inline monospaced type is to remind C-programmers of a pointer.
We use in-line monospace fonts for small code examples; it was obvious to us.

The Lore syntax was intended to be easy for humans to consume.
When there was a difference between "easy for writers" or "easy for programmers," we opted for "easy for writers."
But we believe the syntax is not //too// difficult for programmers to reason about.

::section
::level:1
Review

## !!Lore!! is a lightweight markup language for annotating simple text documents with arbitrary metadata and formatting markup.
## It was invented to support experiments in literate programming, but is useful in the same contexts that other lightweight markup languages are.
## The //Lore Toolchain// converts plain text files formatted using the //Lore Syntax// into HTML, @@ https://en.wikipedia.org/wiki/XSL_Formatting_Objects XSL Formatting Objects @@ or @@ https://en.wikipedia.org/wiki/DocBook DocBook/XML @@ files.
   Other tools like @@ https://www.princexml.com/ PrinceXML @@, @@ https://weasyprint.org/ WeasyPrint @@ or @@ https://xmlgraphics.apache.org/fop/ Apache FOP @@ can convert HTML or FO files into PDFs.
## A Lore file is an ordered collection of //blocks//.
   Blocks are separated by two End-of-Line sequences (LF or CRLF.)
## Text decoration markup (bold, underline, monospace and italic) is triggered by enclosing text in digraphs:
   (\!!) for bold, (\//) for italic / oblique, (\__) for underline and (\**) for monospace.

::section
Annotations, Metadata and Structural Directives

If you remember from the previous section, the !!Lore!! syntax was designed to make it simple to attach metadata to arbitrary blocks of text.
Metadata can apply to the whole document, a single block or a small span of text.
Common bits of document metadata include:
a document's author, it's title, a canonical URL where it can be found on the web or a unique document ID.

Here's an example of a Lore document with metadata attached:

;;--- 64 Columns is THIS much ------------------------------------
::caption:02_document_with_metadata.lore:
  ::title
  An Example Document with Metadata

  ::copy
  Copyright (c) 2019 Meadhbh Hamrick, All Rights Reserved

  ::author
  Meadhbh Hamrick <meadhbh@example.com>

  ::abstract
  This document provides a simple example of a Lore document with
  metadata.

There's no standard interpretation of most metadata; it depends on what the application processing the Lore file thinks it should do.
By default, the **lore2html** utility will convert the document metadata blocks into paragraphs, styled with classes unique to the metadata tag.

The key take-aways here are:

## metadata is signified using the "annotation" double-colon digraph (\::)
## metadata "tags" preceed the blocks they annotate

From a syntax point of view, document metadata is just one use of the annotation digraph (\::).
We also use "annotations" to highlight document structure and add plain links to documents.
Annotations really are the "everything else" workhorse of Lore.

Titles and Section headers automagically generate anchors (targets for links) when used with **lore2html**.
The **\::link** annotation inserts an "undecorated" link to a local or remote link target.
//Undecorated// means the text of the link is the URL or local fragment name of the link.
"Decorated" links use a different format that's described later.

Here's another example:

;;--- 64 Columns is THIS much ------------------------------------
::caption:02_document_with_sections.lore:
  ::title
  An Example Document with Multiple Sections

  This is a document that has multiple sections.

  ::section
  First Section

  This is the first paragraph in the first section.

  This is the second paragraph in the first section.

  This is a link to a later section:
  ::link:#Sub-Section Two:.

  And this is a link to an external document:
  ::link:https://example.com/:

  ::section
  Second Section

  This is the first paragraph in the second section.

  ::section
  ::level:1
  Sub-Section One
  
  This is the first paragraph in the first sub-section of
  the second section.

  ::section
  ::level:1
  Sub-Section Two
  
  This is the first paragraph in the second sub-section of
  the second section.

If we processed this file with **lore2html**, we would get something like this:

;;--- 64 Columns is THIS much ------------------------------------
::caption:02_document_with_sections.html:
  <!DOCTYPE html>
  <html>
    <body>
      <a name="title"/>
      <h1>An Example Document with Multiple Sections</h1>

      <p>This is a document that has multiple sections.</p>

      <p>This is a link to a later section:
      <a href="#_1_1_sub_section_two">Sub-Section Two</a>.</p>

      <p>And this is a link to an external document:
      <a href="https://example.com/">https://example.com/</a>.
      </p>

      <a name="_0_first_section"/>
      <h2>First Section</h2>

      <p>This is the first paragraph in the first section.</p>

      <p>This is the second paragraph in the first section.</p>

      <a name="_1_second_section"/>
      <h2>Second Section</h2>

      <p>This is the first paragraph in the second section.</p>

      <a name="_1_0_sub_section_one">
      <h3>Sub-Section One</h3>

      <p>This is the first paragraph in the first sub-section of
      the second section.</p>

      <a name="_1_1_sub_section_two">
      <h3>Sub-Section Two</h3>

      <p>This is the first paragraph in the second sub-section of
      the second section.</p>
    </body>
  </html>

::section
::level:1
A Closer Look at Block Structure

Now that we've seen annotations in action, let's look at the structure of a block.
As you remember from the section above (::link:#The Very Basics:), blocks are sequences of characters separated by two EOLs (End of Lines.)
Metadata annotations are semantically attached to blocks.
Blocks usually have text, but it's possible to make a block with //only// metadata annotations.

Blocks may also have //comment lines//.
Comments lines only appear at the beginning of a block and are denoted by placing two semi-colons at the beginning of the line.
If you need to include two semicolons at the beginning of a line; that is, you !!don't!! want the dual semi-colon digraph to be interpreted as a comment, you can use a backslash "escape" as described in the ::link:#Escaping and Preformatted Blocks: section below.

The structure of a block is comments, annotations (metadata) and then content.
The following example shows an annotated block, an annotation-only block and a block with comments:

;;--- 64 Columns is THIS much ------------------------------------
::caption:02_blocks.html:
  ::title
  An Example Document With Annotated and Commented Blocks

  ::docid:ab9d99e6-9f04-4317-971c-4a64291b41b6

  ;; This is a simple example of a comment
  ::abstract
  This is a simple example document.

::section
::level:1
Design Rationale

Many of the documents we wrote contained only two levels;
a top level with a title and possibly an abstract followed by several sections.
We felt this is the use case that should be easy for content creators.
We also felt that metadata //should// look like an annotation on data that was already going to be in the document.
So rather than having a separate metadata tag for common metadata (think of HTML that has a TITLE element inside it's HEAD element) we thought we should just "promote" an existing section with a metadata annotation.

The original version of Lore used different digraphs to identify metadata (like title, abstract, etc.) from structural annotations (like **\::section** annotations.)
We found it was slightly confusing to the users who had to remember what was metadata and what was structural annotation.
And the tools we wrote handled metadata and structural annotation identically during the first phase of parsing.
So it may seem weird that we use the annotation digraph (\::) for both metadata and structuring the document, but users said it was easier to not have to remember different digraphs and it made no difference to the complexity of the code we wrote.

::section
::level:1
Review

## The //Annotation Digraph// (**\::**) denotes metadata (like title, abstract, author, etc.) as well
   as structural components in a document (like heading level 1, level 2, etc.)
## You can also insert //undecorated// links using the annotation digraph.
## Blocks consist of comment lines, annotations and content (in that order.)
## Comment lines begin with two semicolons (**\;;**).

::section
Decorated Links

In the section above (::link:#Annotations, Metadata and Structural Directives:), we saw how to specify undecorated links.
They're called "undecorated" because the link target and the link text are the same.
"Decorated" links are links that are decorated with arbitrary text.
Decorated links are comprised of a URL and the decoration text surrounded by the //link digraph// or two at-signs (**\@@**):

  @@ URL text @@

Here is a simple example:

;;--- 64 Columns is THIS much ------------------------------------
::caption:03_links.lore:
  Here is a simple example of a decorated link.
  @@ https://example.org/ Click here to go to !!example.org!! @@.

  Links can occur __within other formatting directives.
  @@ https://example.com/ Click here to go to example.com @@__.

Which would be rendered as:

;;--- 64 Columns is THIS much ------------------------------------
::caption:03_links.html:
  <!DOCTYPE html>
  <html>
    <body>
      <p>Here is a simple example of a decorated link.
      <a href="https://example.org/">Click here to go to
      <b>example.org</b></a>.</p>

      <p>Links can occur <u>within other formatting directives.
      <a href="https://example.com/">Click here to go to
      example.com</a></u></p>
    </body>
  </html>

::section
::level:1
Review

## Decorated links take the format of a URL and decoration text enclosed by the decorated
   link digraph (**\@@**).
## Decorated links can include styled / formatted text and can be included in styled /
   formatted text.
## Decorated links can occur within lists (which will be covered in a later section.)

::section
Escaping and Preformatted Blocks

We selected syntactically significant digraphs for both their intuitive meaning and their uncommonness in typical english prose.
A single slash is common, but outside of a programming language, a double slash is not.
A single colon is common, but a double-colon is not.
But what if a writer really wanted to include a double slash or a double colon? (or any of the other meaningful digraphs?)
!!Lore!! uses the an escaping scheme similar to other systems: it puts a backslash (**\\**) in front of the thing to be literally inserted into the text.
A literal backslash is denoted by two backslashes (**\\\\**).

Consider this example, which shows a table of common Lore digraphs:

::caption::04_lore_cheat_sheet.lore:
  || \!! || Bold            ||
  || \// || Italic          ||
  || \__ || Underline       ||
  || \** || Monospace       ||
  || \$$ || Span            ||
  || \:: || Annotation      ||
  || \## || Ordered Lists   ||
  || \++ || Unordered Lists ||
  || \|| || Tables          ||
  || \;; || Leading Comment ||
  || \⎵⎵ || Leading Blank   ||
  || \\  || Backslash       ||

The important aspect of this table is the use of the backslash in front of each of the digraphs.
This tells the formatter not to try to use the digraph as a formatting (or annotation) instruction, but simply to insert that digraph into the text.

Related to escaped digraphs are //preformatted blocks//.
Preformatted blocks are blocks whose content is not interpreted as formatting instructions or annotations and are intended to be rendered exactly as they appear.
Preformatted blocks are denoted as blocks whose first two characters are spaces (**⎵⎵**).
If you need to include two spaces at the beginning of a line; that is, you !!don't!! want the dual space digraph to be interpreted as the start of a preformatted block line, you can use a backslash "escape" as shown in the chart above.
No formatting or annotation is honored in preformatted blocks.

The Lore syntax itself does not require preformatted blocks be rendered in any particular way, but it's a good guess that the **lore2html** tool will render preformatted blocks as !!<PRE>!! elements in HTML.

The Lore source of this document provides several examples of preformatted blocks.
You can find it at ::link:https://github.com/mercerism/lore/blob/master/docs/00_introduction.lore:.
But here is a simple example:

;;--- 64 Columns is THIS much ------------------------------------
::caption:04_preformatted.lore:
  ::title
  A Simple Example of a Preformatted Block

  As the title suggests, this is a simple example of a
  pre-formatted block. Note that it is prefixed with a caption
  annotation.

  ::caption:Ascii Art Rocks:
    oooo
    `888
     888   .ooooo.  oooo d8b  .ooooo.
     888  d88' `88b `888""8P d88' `88b
     888  888   888  888     888ooo888
     888  888   888  888     888    .o
    o888o `Y8bod8P' d888b    `Y8bod8P'

                                 oooo
                                 `888
    oooo d8b  .ooooo.   .ooooo.   888  oooo   .oooo.o
    `888""8P d88' `88b d88' `"Y8  888 .8P'   d88(  "8
     888     888   888 888        888888.    `"Y88b.
     888     888   888 888   .o8  888 `88b.  o.  )88b
    d888b    `Y8bod8P' `Y8bod8P' o888o o888o 8""888P' 

::section
::level:1
Design Rationale

Most lightweight markup languages provide a way to escape syntactically significant characters and prepending syntax with backslash character is a common way to do it.
We simply re-implemented a common solution.

Preformatted blocks are also common in lightweight markup languages, as is using leading spaces to denote them in the source text.
Some languages use four leading spaces; others use one or more.
Since everything else is a digraph in Lore, we thought it would be weird if we !!didn't!! use two leading spaces to denote a preformatted block.

::section
::level:1
Review

## The backslash (**\\**) is the escape character.
## Put a backslash in front of any semantically important digraph (\//, \!!, \__, etc.) and it will
   demote the digraph to "plain ol' text."
## Preformatted blocks are signified by a block where each line has two leading spaces (⎵⎵).
## No formatting is honored in preformatted blocks.

::section
Including Images, Audio or Video

Rich media is an important part of modern communication.
While !!Lore!! was not intended to be a rich multi-media authoring system, it does support basic multi-media content.
Lore assumes images, videos and audio clips will exist as separate files and will be included into the document by reference.

Images are referenced using an //Image Annotation// with the following format:

  ::image:height:width:URL

The height and width fields are optional, but the enclosing colons must be maintained.
Here are examples of an image references that do not specify the height or width:

  ::image:::./images/4624806398_2b76614983.jpg
  ::image:::https://live.staticflickr.com/4006/4624806398_2b76614983.jpg

And here is what happens when you insert a reference to an image:

::image:::./images/4624806398_2b76614983.jpg

This image, "love" by Jon Obsworth, is licensed under CC BY-ND 2.0.
The authors of this document thank Jon for making this image public.
More information can be found at ::link:https://search.creativecommons.org/photos/8f05b41a-300f-46db-86c7-e61cac1f8860:.

Image references can be enclosed in links, spans or lists.

While Lore tries to separate content from its presentation, this is difficult when it comes to enclosed media.
Lore does not provide syntax to specify captions, float, clearance or styling of images.
However, it does allow the use of //class annotation//.
Class annotation is described in greater detail in the **lore2html** documentation.
For our purposes, it is enough to know that a class annotation !!immediately before!! an image reference will instruct the **lore2html** parser to include a style attribute in the image tag it renders.

For example, this lore text:

  ::class:thumb ::image:15:20:./images/4624806398_2b76614983.jpg

Will cause this to be rendered in HTML:

  <img class="thumb" height="15" width="20" src="./images/4624806398_2b76614983.jpg"/>

Multiple annotations can be applied to an image.
This Lore fragment:

  ::caption:'love' by jon obsworth: ::class:floatleft ::image:::./images/4624806398_2b76614983.jpg

Will render as this HTML by default:

  <img class="thumb" height="15" width="20"
    src="./images/4624806398_2b76614983.jpg"
    alt="'love' by jon obsworth"/>
  <code><b>'love' by jon obsworth</b></code>

See the documentation for **lore2html** for information about including CSS style sheets in HTML generated from Lore.

Audio files are included in a document in the similar way: using an audio annotation.
Audio references include only the URL to the audio sample, but can be preceeded with caption or class annotations.
Here is an example of an audio reference with CSS styling and a caption:

  ::caption:Example Audio: ::class:podcast ::audio:https://example.com/lore_podcast.ogg

The //controls annotation// signals the **lore2html** utility to add a **controls** attribute to the HTML it generates.
For example, this audio reference:

  ::controls ::class:podcast ::audio:https://example.com/podcast_week_2.ogg

Will generate this HTML:

  <audio class="podcast" controls muted src="https://example.com/podcast_week_2.ogg">
    Your browser does not support the audio element.
  </audio>

The Lore specification itself does not cover common options to the audio HTML element.
But the **lore2html** utility allows users to specify which options to include in HTML <AUDIO> tags.

Video references are similar to both audio and image references.
Video references include a height and width but also honor the controls annotation.
For example, this video reference:

  ::controls ::video:160:240:https://example.org/video_sample.mp4

Will generate this HTML:

  <video controls height="160" width="240" source="https://example.org/video_sample.mp4">
    Your browser does not support the audio element.
  </video>

And in the same way audio attribute options can be set with the **lore2html** utility, so can video attribute options.

::section
::level:1
Design Rationale

Multi-media inclusions were difficult for the Lore designers.
Lore is focused on text and in many ways we didn't want to think about multi-media options.
Lore is not a multi-media authoring system, but how useful is a communication tool that doesn't at least address images and sounds?

Lore was not designed to be all things to all people.
It started as an experiment and grew into something useful.
Along the way we discovered we really didn't need a lot of syntax and the less syntax you add, the easier it is to read the documents.

We believe we found a decent middle-ground between utility and complexity.
Much of what designers //really// want when they style multi-media content is not the domain of Lore.
Lore is about annotating text with just enough syntax to cover the 80% case; everything else is an annotation consumed by a specific tool (like **lore2html**.)
Multi-media inclusions use annotations (double-colon markup) because it's really the job of tools like **lore2html** or **lore2docbook** to figure out how they are to be rendered.

::section
::level:1
Review

## Image, Audio and Video multi-media inclusions use annotations to reference an external media file.
## Media-specific options (like the \::controls or \::class annotations) can be used in conjunction
   with the  multi-media annotation to give a rendering app (like **lore2html**) more context about how
   the media is to be rendered.
## Different rendering apps likely have other options for altering how media inclusions are rendered.
## Caption annotations should work with Images, Audio clips and Videos.

::section
Styling Arbitrary Text

The designers of Lore attempted to separate content from it's presentation.
That is, we hoped to avoid mandating specific styles for any particular text fragment.
However, we felt it was necessary to allow authors using the Lore syntax to highlight arbitrary text with styling metadata.
We don't define how "styled" text is rendered, but we do describe a mechanism for communicating that text should be styled to the renderer.

Styled text uses the double-dollar digraph (**\$$**) to enclose a style description and a text fragment.
In the example below, we see a paragraph that includes styled text:

;;--- 64 Columns is THIS much ------------------------------------
::caption:06_styled_text.lore
  This is a simple example of unstyled text. Lore provides syntax
  for bold, italic, underlined and monospace. But what if we
  needed to annotate a text fragment that needed to be $$ invert
  printed in inverse colors? $$ How would that work?

This fragment would then be rendered as:

;;--- 64 Columns is THIS much ------------------------------------
::caption:06_styled_text.html
  <p>This is a simple example of unstyled text. Lore provides
  syntax for bold, italic, underlined and monospace. But what if
  we needed to annotate a text fragment that needed to be
  <span class="invert">printed in inverse colors?</span> How would
  that work?</p>

The format of styled text is this:

  $$ style text $$

The first space-delimeted symbol in the styled text defines the class or classes to be applied to the text.
If multiple styles are to be applied to the styled text fragment, they are comma separated (without spaces.)
For example:

  $$ blue,translucent This is text that is supposed to be translucent and blue $$

And would likely render in HTML as:

  <span class="blue translucent">This is text that is supposed to be translucent and blue</span>

::section
::level:1
Design Rationale

Styled text originally used an annotation syntax like this:

  ::style:blue:I am some blue text:

But beta testers thought it looked too confusing.
There was just a little too much cruft around the text that was actually going to be rendered.
As an alternative, we picked the dollar sign as the basis of the digraph because it looks like the 's' in 'styled'.
And the syntax is similar to that of ::link:#Decorated Links:.
We believe the similarity makes it //easier// to understand, not harder.

::section
::level:1
Review

## Styled text is enclosed by the double-dollar-sign //styled text digraph// (**\$$**).
## The first "word" in a styled text fragment is the name of the style to apply to the remainder of the
   text.
## The Lore syntax does not describe how styled text is rendered; it only requires that the renderer take
   note of the style.
## The **lore2html** utility uses the "style" in the styled text fragment to produce classes in a HTML
   <SPAN> element.
## If you apply multiple styles, use commas to separate the names of the style, not spaces.

::section
Tables

Tables are blocks that start with a double-bar //table digraph// (**\||**).
Their use is easy enough: place each element you want in a cell between the double-bar digraph.
Here's a simple example:

  || one || eleven ||
  || two || twelve ||
  || three || thirteen ||

Like most other aspects of Lore, the syntax gives you few hints as to how the content is styled when it's rendered.
And like most other aspects of Lore, instead of inventing new syntax for options, we use annotations.
Tables can take \::class and \::caption annotations, like this:

  ::caption:!!A Simple Table!!:
  ::class:dark,thin:
  || A || 65 ||
  || B || 66 ||
  || C || 67 ||

A Table header can be added by introducing a \::header annotation.
Headers are row-specific annotations and can be repeated on as many table rows as desired.

  ::caption:!!A Simple Table!!:
  ::class:dark,thin:
  ::header:|| Character || ASCII Code ||
  || A || 65 ||
  || B || 66 ||
  || C || 67 ||

Here is what happens when you render this table:

::caption:!!A Simple Table!!:
::class:dark,thin:
::header:|| Character || ASCII Code ||
|| A || 65 ||
|| B || 66 ||
|| C || 67 ||

It should be noted though, the HTML version of this guide was generated with CSS styling to make the table look "nice".
And the classes **dark** and **thin** were defined to give the table a dark grey background and to take up no more than 50% of the width of the page.

Here is a rendering of the table used as an example above (::link:#04_lore_cheat_sheet.lore:).

|| \!! || Bold            ||
|| \// || Italic          ||
|| \__ || Underline       ||
|| \** || Monospace       ||
|| \$$ || Span            ||
|| \:: || Annotation      ||
|| \## || Ordered Lists   ||
|| \++ || Unordered Lists ||
|| \|| || Tables          ||
|| \;; || Leading Comment ||
|| \⎵⎵ || Leading Blank   ||
|| \\  || Backslash       ||

Cell-based annotations can be applied to table cells by including annotations immediately after the double-bar digraph (**\||**).
This can be used to apply classes to individual cells or to set the **rowspan** or **colspan** attributes for a particular cell.
For example, this Lore fragment uses class and colspan annotations to make the table look like an invoice:

::caption:07_invoide.lore:
  ::caption:Pretending to be an Invoice:
  ::header: ::class:dark: || Count || Unit || Description || Ext ||
  || ::class:right: 2 || ::class:right $7.99 || 8051 Programmer || ::class:right: $15.98 ||
  || ::class:right: 1 || ::class:right $12.99 || Solder || ::class:right: $12.99 ||
  || ::class:right: 1 || ::class:right $39.99 || Soldering Iron || ::class:right: $39.99 ||
  || ::colspan:4: ||
  || ::colspan:3: ::class:right: Subtotal || ::class:right: $68.96 ||
  || ::colspan:3: ::class:right: Tax (8.25%) || ::class:right: $5.69 ||
  || ::colspan:4: ||
  || ::colspan:3: ::class:right: Total || ::class:right: $74.65 ||

And here's what it looks like when rendered:

::caption:Pretending to be an Invoice:
::header: ::class:dark: || Count || Unit || Description || Ext ||
|| ::class:right: 2 || ::class:right $7.99 || 8051 Programmer || ::class:right: $15.98 ||
|| ::class:right: 1 || ::class:right $12.99 || Solder || ::class:right: $12.99 ||
|| ::class:right: 1 || ::class:right $39.99 || Soldering Iron || ::class:right: $39.99 ||
|| ::colspan:4: ||
|| ::colspan:3: ::class:right: Subtotal || ::class:right: $68.96 ||
|| ::colspan:3: ::class:right: Tax (8.25%) || ::class:right: $5.69 ||
|| ::colspan:4: ||
|| ::colspan:3: ::class:right: Total || ::class:right: $74.65 ||

::section
::level:1
Design Rationale

The authors of Lore believe that the table syntax is ugly.
But it is the least bad alternative.
Much of Lore's semantics involve combining annotations, and in the case of tables, it gets ugly quickly.

::section
::level:1
Review

## Table cells are delimited by double-bar digraphs (**\||**).
## Each text row of cells delimeted by double-bar digraphs represents a table row.
## Captions and class annotations for the table come before the table.
## Class annotations for table rows come at the beginning of a row.
## Class, Colspan and Rowspan annotations for cells come immediately after the opening double-bar digraph.
## Tables are problematic because there is tight coupling between class annotations and the CSS or XSLT
   used to style the rendered output as HTML or XML.

::section
Lists

There are two types of lists: ordered and unordered.
Unordered lists use bullets to introduce each new list item.
Ordered lists use an incrementing count to introduce each item.

Unordered lists are blocks whose every line begins with a double-plus digraph (**\++**).
Ordered lists are blocks whose every line begins with a double-octothorp digraph (**\##**).
Here's an example:

;;--- 64 Columns is THIS much ------------------------------------
::caption:08_A_List_Example.lore
  Remember to buy a few things at the store:

  ++ Eggs
  ++ Milk
  ++ USB Flash Drive

  The most important things on the to-do list now are:

  ## Go to the store.
  ## Get the car washed.
  ## Complete paperwork.

And here's what this fragment looks like when rendered:

Remember to buy a few things at the store:

++ Eggs
++ Milk
++ USB Flash Drive

The most important things on the to-do list now are:

## Go to the store.
## Get the car washed.
## Complete paperwork.

Syling information can be applied to a list by adding an annotation to the beginning:

;;--- 64 Columns is THIS much ------------------------------------
::caption:08_Another_List_Example.lore
  ::list-style:georgian,inside:
  ++ One
  ++ Two
  ++ Three

::section
Conclusion

This document has presented the core features of the Lore syntax.
We hope it has been easy to digest.
Related documents are available:

++ ::link:https://mercerism.github.io/lore/01_example.html: This page shows a simple example Lore file
   and the HTML it is rendered into with **lore2html**.
++ ::link:https://mercerism.github.io/lore/02_lore2html.html: This is a page that describes the use of the
   **lore2html** utility.
